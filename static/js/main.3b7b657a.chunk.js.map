{"version":3,"sources":["logo.svg","components/Assets/home-image.jpg","components/Home/Home.jsx","components/Navbar.jsx","App.js","reportWebVitals.js","index.js"],"names":["Home","Container","fluid","className","src","homeImage","alt","width","height","NavBar","useState","updateExpanded","updateNavbar","window","addEventListener","scrollY","Navbar","bg","expand","fixed","Nav","defaultActiveKey","Item","Link","as","to","onClick","App","load","upadateLoad","useEffect","timer","setTimeout","clearTimeout","id","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAAe,I,aCAA,MAA0B,uC,eCkB1BA,EAbF,WACX,OACE,8BACE,eAACC,EAAA,EAAD,CAAWC,OAAK,EAACC,UAAU,eAA3B,UACE,qBAAKA,UAAU,cAAf,SACE,yDAEF,qBAAKC,IAAKC,EAAWC,IAAI,WAAWH,UAAU,YAAYI,MAAM,MAAMC,OAAO,c,wBC4BtEC,MAlCf,WACE,MAAiCC,oBAAS,GAA1C,mBAAeC,GAAf,WACA,EAAkCD,oBAAS,GAA3C,mBAAkBE,GAAlB,WAYA,OAFAC,OAAOC,iBAAiB,UARxB,WACMD,OAAOE,SAAW,GACpBH,GAAa,GAEbA,GAAa,MAOf,cAACI,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,KAAKC,MAAM,MAArC,SACE,cAAClB,EAAA,EAAD,UACE,eAACmB,EAAA,EAAD,CAAKjB,UAAU,UAAUkB,iBAAiB,QAA1C,UACE,cAACD,EAAA,EAAIE,KAAL,UACE,cAACF,EAAA,EAAIG,KAAL,CAAUC,GAAID,IAAME,GAAG,IAAIC,QAAS,kBAAMf,GAAe,IAAzD,oBAIF,cAACS,EAAA,EAAIE,KAAL,UACE,cAACF,EAAA,EAAIG,KAAL,CAAUC,GAAID,IAAME,GAAG,SAASC,QAAS,kBAAMf,GAAe,IAA9D,6B,OCmBGgB,MA1Cf,WACE,MAA4BjB,oBAAS,GAArC,mBAAOkB,EAAP,KAAaC,EAAb,KAUA,OARAC,qBAAU,WACR,IAAMC,EAAQC,YAAW,WACvBH,GAAY,KACX,MAEH,OAAO,kBAAMI,aAAaF,MACzB,IAGD,qBAAK5B,UAAU,MAAf,SACE,cAAC,IAAD,UACE,sBAAKA,UAAU,MAAM+B,GAAIN,EAAO,YAAc,SAA9C,UACE,cAAC,EAAD,IACA,cAAC,IAAD,UACE,cAAC,IAAD,CAAOO,KAAK,IAAIC,QAAS,cAAC,EAAD,gBCZtBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3b7b657a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export default __webpack_public_path__ + \"static/media/home-image.c4e56512.jpg\";","import React, { useContext, useState, useEffect } from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport homeImage from \"../Assets/home-image.jpg\"\r\nimport './Home.css';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div>\r\n      <Container fluid className=\"home-section\">\r\n        <div className=\"header-name\">\r\n          <h1>Hi! I'm Andrew Jones.</h1>\r\n        </div>\r\n        <img src={homeImage} alt=\"home pic\" className=\"img-fluid\" width=\"600\" height=\"500\" />\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useState } from \"react\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nfunction NavBar() {\r\n  const [expand, updateExpanded] = useState(false);\r\n  const [navColour, updateNavbar] = useState(false);\r\n\r\n  function scrollHandler() {\r\n    if (window.scrollY >= 20) {\r\n      updateNavbar(true);\r\n    } else {\r\n      updateNavbar(false);\r\n    }\r\n  }\r\n\r\n  window.addEventListener(\"scroll\", scrollHandler);\r\n\r\n  return (\r\n    <Navbar bg=\"light\" expand=\"lg\" fixed=\"top\">\r\n      <Container>\r\n        <Nav className=\"ml-auto\" defaultActiveKey=\"#home\">\r\n          <Nav.Item>\r\n            <Nav.Link as={Link} to=\"/\" onClick={() => updateExpanded(false)}>\r\n               Home\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link as={Link} to=\"/about\" onClick={() => updateExpanded(false)}>\r\n               About\r\n            </Nav.Link>\r\n          </Nav.Item>\r\n        </Nav>\r\n      </Container>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { useContext, useState, useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Home from \"./components/Home/Home\";\nimport NavBar from \"./components/Navbar\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\n\nfunction App() {\n  const [load, upadateLoad] = useState(true);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      upadateLoad(false);\n    }, 1200);\n\n    return () => clearTimeout(timer);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <div className=\"App\" id={load ? \"no-scroll\" : \"scroll\"}>\n          <NavBar />\n          <Routes>\n            <Route path=\"/\" element={<Home />} />\n          </Routes>\n        </div>\n      </Router>\n    </div>\n\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <p>\n    //       Edit <code>src/App.js</code> and save to reload.\n    //     </p>\n    //     <a\n    //       className=\"App-link\"\n    //       href=\"https://reactjs.org\"\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React\n    //     </a>\n    //   </header>\n    // </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}